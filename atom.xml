<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>独孤酒剑</title>
  
  <subtitle>快乐工作，认真生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.mycise.com/"/>
  <updated>2018-05-05T09:11:47.334Z</updated>
  <id>http://blog.mycise.com/</id>
  
  <author>
    <name>独孤酒剑</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dpvs源码分析（二）之链路层</title>
    <link href="http://blog.mycise.com/2018/05/03/dpvs%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <id>http://blog.mycise.com/2018/05/03/dpvs源码分析（二）之链路层/</id>
    <published>2018-05-03T14:36:49.691Z</published>
    <updated>2018-05-05T09:11:47.334Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅仅概述dpvs二三层协议栈的处理流程，只会对重点函数和流程分析，以避免刚刚接触DPVS的同学被这些细节扰乱视听。后面的章节将会针对于某个某块进行重点分析。</p><p>接<strong><a href="/2018/05/03/dpvs源码分析（一）之启动过程/" title="dpvs源码分析（一）之启动过程">dpvs源码分析（一）之启动过程</a></strong>，我们知道，lcore_job_recv_fwd是首先被调动的函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lcore_job_recv_fwd</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">portid_t</span> pid;</span><br><span class="line">    <span class="keyword">lcoreid_t</span> cid;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">netif_queue_conf</span> *<span class="title">qconf</span>;</span></span><br><span class="line"></span><br><span class="line">    cid = rte_lcore_id();</span><br><span class="line">    assert(LCORE_ID_ANY != cid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lcore_conf[lcore2index[cid]].nports; i++) &#123;</span><br><span class="line">        pid = lcore_conf[lcore2index[cid]].pqs[i].id;</span><br><span class="line">        assert(pid &lt; rte_eth_dev_count());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lcore_conf[lcore2index[cid]].pqs[i].nrxq; j++) &#123;</span><br><span class="line">            qconf = &amp;lcore_conf[lcore2index[cid]].pqs[i].rxqs[j];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 从arp_ring获取arp报文，最后调用lcore_process_packets 处理，所以直接看lcore_process_packets这个函数就好了。</span></span><br><span class="line">            lcore_process_arp_ring(qconf,cid);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从网卡收包，存放于qconf-&gt;mbufs 结构体重，len为包的数量</span></span><br><span class="line">            qconf-&gt;len = netif_rx_burst(pid, qconf);</span><br><span class="line">            <span class="comment">//统计</span></span><br><span class="line">            lcore_stats_burst(&amp;lcore_stats[cid], qconf-&gt;len);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//处理数据报文，</span></span><br><span class="line">            <span class="comment">//mbuf会在lcore_process_packets被释放</span></span><br><span class="line">            lcore_process_packets(qconf, qconf-&gt;mbufs, cid, qconf-&gt;len, <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//将报文发送给Linux kernel</span></span><br><span class="line">            kni_send2kern_loop(pid, qconf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lcore_process_packets</span><span class="params">(struct netif_queue_conf *qconf, struct rte_mbuf **mbufs,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">lcoreid_t</span> cid, <span class="keyword">uint16_t</span> count, <span class="keyword">bool</span> pretetch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* prefetch packets </span></span><br><span class="line"><span class="comment">    预先将数据包从内存加载到cache，这样有可能加快运行速度*/</span></span><br><span class="line">    <span class="keyword">if</span> (pretetch) &#123;</span><br><span class="line">        <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; qconf-&gt;len &amp;&amp; t &lt; NETIF_PKT_PREFETCH_OFFSET; t++)</span><br><span class="line">            rte_prefetch0(rte_pktmbuf_mtod(qconf-&gt;mbufs[t], <span class="keyword">void</span> *));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* L2 filter */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">/*校验mac地址，如果和物理设备的mac地址一样，被设置为RTE_TYPE_HOST。不一样则被设置为ETH_PKT_OTHERHOST*/</span></span><br><span class="line">        <span class="comment">/* reuse mbuf.packet_type, it was RTE_PTYPE_XXX */</span></span><br><span class="line">        mbuf-&gt;packet_type = eth_type_parse(eth_hdr, dev);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 如果通过dpip命令设置了设备forward2kni on，那么所有的报文都会复制一份给kernel</span></span><br><span class="line"><span class="comment">         * 所有数据包复制一份通过kni发送给kernel， 原有mbuf不变。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (dev-&gt;flag &amp; NETIF_PORT_FLAG_FORWARD2KNI) &#123;</span><br><span class="line">            <span class="keyword">if</span> (likely(<span class="literal">NULL</span> != (mbuf_copied = mbuf_copy(mbuf,</span><br><span class="line">                                pktmbuf_pool[dev-&gt;socket]))))</span><br><span class="line">                kni_ingress(mbuf_copied, dev, qconf);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                RTE_LOG(WARNING, NETIF, <span class="string">"%s: Failed to copy mbuf\n"</span>,</span><br><span class="line">                        __func__);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * handle VLAN</span></span><br><span class="line"><span class="comment">         * if HW offload vlan strip, it's still need vlan module</span></span><br><span class="line"><span class="comment">         * to act as VLAN filter.</span></span><br><span class="line"><span class="comment">         * vlan_rcv会通过vlanid找到对应的dev，然后将dev id复制给mbuf-&gt;port_id</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (eth_hdr-&gt;ether_type == htons(ETH_P_8021Q) ||</span><br><span class="line">            mbuf-&gt;ol_flags &amp; PKT_RX_VLAN_STRIPPED) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vlan_rcv(mbuf, netif_port_get(mbuf-&gt;port)) != EDPVS_OK) &#123;</span><br><span class="line">                rte_pktmbuf_free(mbuf);</span><br><span class="line">                lcore_stats[cid].dropped++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*通过port id找到对应的dev设备*/</span></span><br><span class="line">            dev = netif_port_get(mbuf-&gt;port);</span><br><span class="line">            <span class="keyword">if</span> (unlikely(!dev)) &#123;</span><br><span class="line">                rte_pktmbuf_free(mbuf);</span><br><span class="line">                lcore_stats[cid].dropped++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*获取二层头*/</span></span><br><span class="line">            eth_hdr = rte_pktmbuf_mtod(mbuf, struct ether_hdr *);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* handler should free mbuf */</span></span><br><span class="line">        netif_deliver_mbuf(mbuf, eth_hdr-&gt;ether_type, dev, qconf,</span><br><span class="line">                           (dev-&gt;flag &amp; NETIF_PORT_FLAG_FORWARD2KNI) ? <span class="literal">true</span>:<span class="literal">false</span>,</span><br><span class="line">                           cid, pkts_from_ring);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*上文用到了vlan_rcv这里对vlan_rcv做解析*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vlan_rcv</span><span class="params">(struct rte_mbuf *mbuf, struct netif_port *real_dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 剥离VLAN tag</span></span><br><span class="line">    err = vlan_untag_mbuf(mbuf);</span><br><span class="line">    <span class="keyword">if</span> (unlikely(err != EDPVS_OK))</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    <span class="comment">// 依据VLAN tag找到对应的VLAN设备</span></span><br><span class="line">    dev = vlan_find_dev(real_dev, htons(ETH_P_8021Q),</span><br><span class="line">                        mbuf_vlan_tag_get_id(mbuf));</span><br><span class="line">    mbuf-&gt;port = dev-&gt;id;</span><br><span class="line">    <span class="keyword">if</span> (unlikely(mbuf-&gt;packet_type == ETH_PKT_OTHERHOST)) &#123;</span><br><span class="line"><span class="comment">/*这里通过目的地址判断，包是不是发送给vlan的。*/</span></span><br><span class="line">        <span class="keyword">if</span> (eth_addr_equal(&amp;ehdr-&gt;d_addr, &amp;dev-&gt;addr))</span><br><span class="line">            mbuf-&gt;packet_type = ETH_PKT_HOST<span class="comment">/*如果是ETH_PKT_OTHERHOST报文会被丢弃*/</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面对vlan神马的都处理了，接下来就是二层报文的处理了：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">netif_deliver_mbuf</span><span class="params">(struct rte_mbuf *mbuf,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">uint16_t</span> eth_type,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     struct netif_port *dev,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     struct netif_queue_conf *qconf,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">bool</span> forward2kni,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">lcoreid_t</span> cid,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">bool</span> pkts_from_ring)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    pkt_type注册见下文，这里通过eth_type获取ptk_type</span><br><span class="line">    其他协议，都会送给linux kernel</span><br><span class="line">    pt = pkt_type_get(eth_type, dev);</span><br><span class="line">    <span class="keyword">if</span> (!forward2kni &amp;&amp; <span class="literal">NULL</span> == pt) &#123;</span><br><span class="line">    <span class="comment">/*通过kni，发送给linux kernel*/</span></span><br><span class="line">        kni_ingress(mbuf, dev, qconf);</span><br><span class="line">        <span class="keyword">return</span> EDPVS_OK;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*clone arp pkt to every queue*/</span></span><br><span class="line">    <span class="keyword">if</span> (pt-&gt;type == rte_cpu_to_be_16(ETHER_TYPE_ARP) &amp;&amp; !pkts_from_ring<span class="comment">/*arp_ring里的报文，肯定不能再入ring了。*/</span>) &#123;</span><br><span class="line">       <span class="comment">/*将arp报文clone到每个队列，每个core维护自己的arp表现*/</span></span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*Remove len bytes at the beginning of an mbuf. 移除二层头*/</span></span><br><span class="line">    <span class="keyword">if</span> (unlikely(<span class="literal">NULL</span> == rte_pktmbuf_adj(mbuf, <span class="keyword">sizeof</span>(struct ether_hdr))))</span><br><span class="line">        <span class="keyword">return</span> EDPVS_INVPKT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*在这里就开始处理上层协议了，目前只会处理ip和arp，也只注册了这两种*/</span></span><br><span class="line">    err = pt-&gt;func(mbuf, dev);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (err == EDPVS_KNICONTINUE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pkts_from_ring) &#123;</span><br><span class="line">        <span class="comment">/*pkt_from_ring为arp_ring过来的报文</span></span><br><span class="line"><span class="comment">        * arp_ring过来的报文不再发给linux kernel，因此需要free mubf</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">            rte_pktmbuf_free(mbuf);</span><br><span class="line">            <span class="keyword">return</span> EDPVS_OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!forward2kni &amp;&amp; likely(<span class="literal">NULL</span> != rte_pktmbuf_prepend(mbuf,  (mbuf-&gt;data_off - data_off))))</span><br><span class="line">        <span class="comment">// 发送给linux kernel</span></span><br><span class="line">            kni_ingress(mbuf, dev, qconf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EDPVS_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不同类型的报文，注册不同的处理函数。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">pkt_type</span> <span class="title">ip4_pkt_type</span> = &#123;</span></span><br><span class="line">    <span class="comment">//.type       = rte_cpu_to_be_16(ETHER_TYPE_IPv4),</span></span><br><span class="line">    .func       = ipv4_rcv,</span><br><span class="line">    .port       = <span class="literal">NULL</span>,</span><br><span class="line">&#125;;</span><br><span class="line">ip4_pkt_type.type = htons(ETHER_TYPE_IPv4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">pkt_type</span> <span class="title">arp_pkt_type</span> = &#123;</span></span><br><span class="line">    <span class="comment">//.type       = rte_cpu_to_be_16(ETHER_TYPE_ARP),</span></span><br><span class="line">    .func       = neigh_resolve_input,</span><br><span class="line">    .port       = <span class="literal">NULL</span>,</span><br><span class="line">&#125;;</span><br><span class="line">arp_pkt_type.type = rte_cpu_to_be_16(ETHER_TYPE_ARP);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>目前只有ETHER_TYPE_ARP和ETHER_TYPE_IPv4被注册，也就是说dpvs协议栈目前仅仅会对这两种协议进行处理。其余的协议会通过kni传递个linux kernel。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文仅仅概述dpvs二三层协议栈的处理流程，只会对重点函数和流程分析，以避免刚刚接触DPVS的同学被这些细节扰乱视听。后面的章节将会针对于某个某块进行重点分析。&lt;/p&gt;
&lt;p&gt;接&lt;strong&gt;&lt;a href=&quot;/2018/05/03/dpvs源码分析（一）之启动过程/&quot; 
      
    
    </summary>
    
      <category term="原创精选" scheme="http://blog.mycise.com/categories/%E5%8E%9F%E5%88%9B%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="网络转发" scheme="http://blog.mycise.com/tags/%E7%BD%91%E7%BB%9C%E8%BD%AC%E5%8F%91/"/>
    
      <category term="DPVS" scheme="http://blog.mycise.com/tags/DPVS/"/>
    
      <category term="DPDK" scheme="http://blog.mycise.com/tags/DPDK/"/>
    
  </entry>
  
  <entry>
    <title>dpvs源码分析（三）之网络层</title>
    <link href="http://blog.mycise.com/2018/05/03/dpvs%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>http://blog.mycise.com/2018/05/03/dpvs源码分析（三）之网络层/</id>
    <published>2018-05-03T14:36:49.688Z</published>
    <updated>2018-05-03T14:36:49.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ipv4报文处理"><a href="#ipv4报文处理" class="headerlink" title="ipv4报文处理"></a>ipv4报文处理</h1><p>接<strong><a href="/2018/05/03/dpvs源码分析（二）之链路层/" title="dpvs源码分析（二）之链路层">dpvs源码分析（二）之链路层</a></strong> 我们知道在处理ipv4报文在下面的函数当中。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ipv4_rcv</span><span class="params">(struct rte_mbuf *mbuf, struct netif_port *port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">      </span><br><span class="line"><span class="comment">/*这个函数应该是参考了linux协议栈的处理。大概的意思是：</span></span><br><span class="line"><span class="comment"> *pskb_may_pull确保skb-&gt;data指向的内存包含的数据至少为IP头部大小，由于每个</span></span><br><span class="line"><span class="comment"> *IP数据包包括IP分片必须包含一个完整的IP头部。如果小于IP头部大小，则缺失</span></span><br><span class="line"><span class="comment"> *的部分将从数据分片中拷贝。这些分片保存在skb_shinfo(skb)-&gt;frags[]中。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">     <span class="comment">//参考http://blog.chinaunix.net/uid-22577711-id-3220103.html</span></span><br><span class="line">    <span class="keyword">if</span> (mbuf_may_pull(mbuf, <span class="keyword">sizeof</span>(struct ipv4_hdr)) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> inhdr_error;</span><br><span class="line"></span><br><span class="line">    iph = ip4_hdr(mbuf);</span><br><span class="line"></span><br><span class="line">    hlen = ip4_hdrlen(mbuf);</span><br><span class="line">    <span class="keyword">if</span> (((iph-&gt;version_ihl) &gt;&gt; <span class="number">4</span>) != <span class="number">4</span> || hlen &lt; <span class="keyword">sizeof</span>(struct ipv4_hdr))</span><br><span class="line">        <span class="keyword">goto</span> inhdr_error;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mbuf_may_pull(mbuf, hlen) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> inhdr_error;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (unlikely(!(port-&gt;flag &amp; NETIF_PORT_FLAG_RX_IP_CSUM_OFFLOAD))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (unlikely(rte_raw_cksum(iph, hlen) != <span class="number">0xFFFF</span>))</span><br><span class="line">            <span class="keyword">goto</span> csum_error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    len = ntohs(iph-&gt;total_length);</span><br><span class="line">    <span class="keyword">if</span> (mbuf-&gt;pkt_len &lt; len) &#123;</span><br><span class="line">        IP4_INC_STATS(intruncatedpkts);</span><br><span class="line">        <span class="keyword">goto</span> drop;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len &lt; hlen)</span><br><span class="line">        <span class="keyword">goto</span> inhdr_error;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* trim padding if needed */</span></span><br><span class="line">    <span class="keyword">if</span> (mbuf-&gt;pkt_len &gt; len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rte_pktmbuf_trim(mbuf, mbuf-&gt;pkt_len - len) != <span class="number">0</span>) &#123;</span><br><span class="line">            IP4_INC_STATS(indiscards);</span><br><span class="line">            <span class="keyword">goto</span> drop;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mbuf-&gt;userdata = <span class="literal">NULL</span>;</span><br><span class="line">    mbuf-&gt;l3_len = hlen;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DPVS_IPV4_DEBUG</span></span><br><span class="line">    ip4_dump_hdr(iph, mbuf-&gt;port);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> INET_HOOK(INET_HOOK_PRE_ROUTING, mbuf, port, <span class="literal">NULL</span>, ipv4_rcv_fin);</span><br><span class="line"></span><br><span class="line">csum_error:</span><br><span class="line">    IP4_INC_STATS(csumerrors);</span><br><span class="line">inhdr_error:</span><br><span class="line">    IP4_INC_STATS(inhdrerrors);</span><br><span class="line">drop:</span><br><span class="line">    rte_pktmbuf_free(mbuf);</span><br><span class="line">    <span class="keyword">return</span> EDPVS_INVPKT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">INET_HOOK</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> hook, struct rte_mbuf *mbuf,</span></span></span><br><span class="line"><span class="function"><span class="params">        struct netif_port *in, struct netif_port *out,</span></span></span><br><span class="line">        int (*okfn)(struct rte_mbuf *mbuf))</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//执行hook函数</span></span><br><span class="line">    ops = list_entry(hook_list, struct inet_hook_ops, <span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!list_empty(hook_list)) &#123;</span><br><span class="line">        verdict = INET_ACCEPT;</span><br><span class="line">        list_for_each_entry_continue(ops, hook_list, <span class="built_in">list</span>) &#123;</span><br><span class="line">repeat:</span><br><span class="line">            verdict = ops-&gt;hook(ops-&gt;priv, mbuf, &amp;state);</span><br><span class="line">            <span class="keyword">if</span> (verdict != INET_ACCEPT) &#123;</span><br><span class="line">                <span class="keyword">if</span> (verdict == INET_REPEAT)</span><br><span class="line">                    <span class="keyword">goto</span> repeat;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (verdict == INET_ACCEPT || verdict == INET_STOP) &#123;</span><br><span class="line">        <span class="keyword">return</span> okfn(mbuf); </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (verdict == INET_DROP) &#123;</span><br><span class="line">        rte_pktmbuf_free(mbuf); <span class="comment">//继续协议栈处理</span></span><br><span class="line">        <span class="keyword">return</span> EDPVS_DROP;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">/* INET_STOLEN */</span></span><br><span class="line">        <span class="keyword">return</span> EDPVS_OK; <span class="comment">//交由下一个函数处理，</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ipv4报文处理&quot;&gt;&lt;a href=&quot;#ipv4报文处理&quot; class=&quot;headerlink&quot; title=&quot;ipv4报文处理&quot;&gt;&lt;/a&gt;ipv4报文处理&lt;/h1&gt;&lt;p&gt;接&lt;strong&gt;&lt;a href=&quot;/2018/05/03/dpvs源码分析（二）之链路层/
      
    
    </summary>
    
      <category term="网络转发" scheme="http://blog.mycise.com/categories/%E7%BD%91%E7%BB%9C%E8%BD%AC%E5%8F%91/"/>
    
    
      <category term="网络转发" scheme="http://blog.mycise.com/tags/%E7%BD%91%E7%BB%9C%E8%BD%AC%E5%8F%91/"/>
    
      <category term="DPVS" scheme="http://blog.mycise.com/tags/DPVS/"/>
    
      <category term="DPDK" scheme="http://blog.mycise.com/tags/DPDK/"/>
    
  </entry>
  
  <entry>
    <title>container_of</title>
    <link href="http://blog.mycise.com/2018/05/03/container_of/"/>
    <id>http://blog.mycise.com/2018/05/03/container_of/</id>
    <published>2018-05-03T14:36:49.683Z</published>
    <updated>2018-05-05T09:07:31.771Z</updated>
    
    <content type="html"><![CDATA[<p>linux 内核链表的实现有段代码比较有意思，这里记录一下。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>当在阅读遍历链表这个宏定义时，可能会对container_of有些许疑惑。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**    </span></span><br><span class="line"><span class="comment"> * list_for_each_entry  -   iterate over list of given type</span></span><br><span class="line"><span class="comment"> * @pos:    the type * to use as a loop cursor.</span></span><br><span class="line"><span class="comment"> * @head:   the head for your list.</span></span><br><span class="line"><span class="comment"> * @member: the name of the list_head within the struct.</span></span><br><span class="line"><span class="comment"> */</span>    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> list_for_each_entry(pos, head, member)              \</span></span><br><span class="line">    <span class="keyword">for</span> (pos = list_first_entry(head, typeof(*pos), member);    \</span><br><span class="line">         &amp;pos-&gt;member != (head);                    \</span><br><span class="line">         pos = list_next_entry(pos, member))</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * list_entry - get the struct for this entry</span></span><br><span class="line"><span class="comment"> * @ptr:    the &amp;struct list_head pointer.</span></span><br><span class="line"><span class="comment"> * @type:   the type of the struct this is embedded in.</span></span><br><span class="line"><span class="comment"> * @member: the name of the list_head within the struct.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> list_entry(ptr, type, member) \</span></span><br><span class="line">    container_of(ptr, type, member)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * list_first_entry - get the first element from a list</span></span><br><span class="line"><span class="comment"> * @ptr:    the list head to take the element from.</span></span><br><span class="line"><span class="comment"> * @type:   the type of the struct this is embedded in.</span></span><br><span class="line"><span class="comment"> * @member: the name of the list_head within the struct.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note, that list is expected to be not empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> list_first_entry(ptr, type, member) \</span></span><br><span class="line">    list_entry((ptr)-&gt;next, type, member)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> container_of</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> container_of(ptr, type, member) \</span></span><br><span class="line">    (type *)((<span class="keyword">char</span> *)(ptr) - (<span class="keyword">char</span> *) &amp;((type *)<span class="number">0</span>)-&gt;member)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> container_of(ptr, type, member) \</span></span><br><span class="line">    (type *)((<span class="keyword">char</span> *)(ptr) - (<span class="keyword">char</span> *) &amp;((type *)<span class="number">0</span>)-&gt;member)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p>如上定义，为了更直观，定义如下数据结构：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">prev</span>;</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">type</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span></span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>那么对于container_of宏定义，三个参数分别对应：</p><ul><li>ptr: list的内存地址</li><li>type: list所在数据结构的类型</li><li>member： 是指list_head定义变量的名字，那么在这里就叫list</li></ul><p>这个宏定义的功能：通过member的地址和member的名字获取member所在数据结构的首地址。<br>首先： (char <em>) &amp;((type </em>)0)-&gt;member获取member在type类型中的偏移量<br>然后： 用ptr减去member在type类型数据结构中的偏移量，那么就得到了member所在type变量的首地址。</p><p>最后举例：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">int</span> a;</span><br><span class="line">   <span class="keyword">int</span> b;</span><br><span class="line">   <span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">A</span> <span class="title">x</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">A</span> *<span class="title">y</span>;</span></span><br><span class="line">    x.a = <span class="number">1024</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"output1: %0x\n"</span>, &amp;(((struct A*)<span class="number">0</span>)-&gt;b)); </span><br><span class="line">    y = (struct A*) (((<span class="keyword">char</span>*)(&amp;x.b)) - ((<span class="keyword">char</span>*)&amp;(((struct A*)<span class="number">0</span>)-&gt;b)));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"output2: %d\n"</span>, y-&gt;a); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"output3:%0x\n"</span>, &amp;x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"output4:%0x\n"</span>, y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果为：</span><br><span class="line">output1: <span class="number">4</span></span><br><span class="line">output2: <span class="number">1024</span></span><br><span class="line">output3:<span class="number">5b</span>22a1e0</span><br><span class="line">output4:<span class="number">5b</span>22a1e0</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;linux 内核链表的实现有段代码比较有意思，这里记录一下。&lt;/p&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;当在阅读遍历链表这个宏定义时，可能会对container_of有
      
    
    </summary>
    
      <category term="原创精选" scheme="http://blog.mycise.com/categories/%E5%8E%9F%E5%88%9B%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="container_of" scheme="http://blog.mycise.com/tags/container-of/"/>
    
      <category term="linux" scheme="http://blog.mycise.com/tags/linux/"/>
    
      <category term="链表" scheme="http://blog.mycise.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>基于DPDK的多核令牌桶算法</title>
    <link href="http://blog.mycise.com/2018/05/03/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.mycise.com/2018/05/03/令牌桶算法算法/</id>
    <published>2018-05-03T14:28:37.304Z</published>
    <updated>2018-05-05T09:05:05.830Z</updated>
    
    <content type="html"><![CDATA[<p>QoS（Quality of Service，服务质量）指一个网络能够利用各种基础技术，为指定的网络通信提供更好的服务能力, 是网络的一种安全机制， 是用来解决网络延迟和阻塞等问题的一种技术。其中限速就是一种QOS机制，目前限速算法中用得比较多的是令牌桶算法。本文不打算套路目前有哪些限速算法，而主要套路基于DPDK的软件架构，如何实现多核限速算法，并获取到较高的性能。</p><h1 id="令牌桶算法介绍"><a href="#令牌桶算法介绍" class="headerlink" title="令牌桶算法介绍"></a>令牌桶算法介绍</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>所谓的令牌桶算法，顾名思义，就是向一个桶中按照一定的速率放入令牌，如下图所示。当有需要限速的数据包通过的时候，依据数据报文的长度算出需要取走的令牌数N。如果桶中的令牌数量大于N，那么此数据包就顺利通过了限速测试。反之，此数据包就没有通过限速测试，于是就将报文进行丢弃处理（大多数情况下是如此，也可以进行其他处理，依赖用户程序的设计）。整个令牌桶算法的主要原理就是这样，是不是感觉很简单，详细分析将在下文介绍。<br><img src="/images/lingpaitong.PNG" width="800" height="700"></p><h2 id="基于DPDK的实现"><a href="#基于DPDK的实现" class="headerlink" title="基于DPDK的实现"></a>基于DPDK的实现</h2><p>首先介绍下DPDK的两个函数，这也是在算法的实现中需要用到的两个函数，摘抄自DPDK官方文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static uint64_t rte_get_timer_cycles(void )</span><br><span class="line">Get the number of cycles since boot from the default timer.</span><br><span class="line"></span><br><span class="line">static uint64_t rte_get_timer_hz(void)</span><br><span class="line">Get the number of cycles in one second for the default timer.</span><br></pre></td></tr></table></figure></p><h3 id="放入令牌"><a href="#放入令牌" class="headerlink" title="放入令牌"></a>放入令牌</h3><p>在本设计中，以N = rte_get_timer_hz() 的速率向桶里面放令牌。也就是说，每秒放入一秒的时钟周期个数的令牌。的限速rate = 10000Bps，需要限速的包的大小为1500B。那么在处理该数据包，应该消耗多少令牌呢？利用小学数学应该可以算出，需要消耗<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果一秒内有一个包：</span><br><span class="line">N * (1500 / 10000) &lt; N 此时可以通过</span><br><span class="line">如果一秒内有7个包</span><br><span class="line">N * (1500*7 / 10000) &gt; N 那么第七个包将会被丢弃</span><br></pre></td></tr></table></figure></p><h3 id="放入方式"><a href="#放入方式" class="headerlink" title="放入方式"></a>放入方式</h3><p>假设每秒应该放入N = rte_get_timer_hz() 个令牌</p><ul><li>方式1： 设置定时器，在定时器的回调函数中放入令牌。<ul><li>解析： 可以利用dpdk的定时器，比如设置每1秒，call以下回调函数，放入令牌1 * N个令牌。</li><li>缺陷1： 这种方式的问题在于，如果在这一秒钟内，如果前0.5秒的突发流量将令牌都消耗完了，那么后0.5秒的报文不就全部丢掉了。有人说，可以将这个间隔设置小一点啊，比入每1/1000秒放入N/1000个令牌。但是问题在于，这个间隔到底是多少好呢？</li><li>缺陷2： 无法处理突发流量，原因见方式3。</li></ul></li></ul><ul><li><p>方式2： 按时间间隔放入</p><ul><li>解析： 按时间间隔放入，假设当前报文和上一个报文的时间间隔为1ms秒，那么放入1/1000 * N 个令牌。这种方式的好处在于针对于每个数据包的处理前都会放入令牌，分散了令牌的放入。</li><li>缺陷： 无法处理突发流量，原因见方式3。<img src="/images/lingpaitong1.JPG"></li></ul></li><li><p>方式3： 改进方式2</p><ul><li>背景： 方式1和方式2都面临一个问题，如果有突发流量，那么可能在极短的时间内消耗全部的令牌，大量的流量被放行，从而对系统造成威胁。</li><li>解析： 如果当出现丢包，那么在接下来的200us内的前64个报文都会被丢弃。对于200us和64这个值都是经验值，可以在真实场景中进行调优。</li><li>缺陷： 这个方式降低了突发流量对系统的威胁，但是会对限速的准确性有一定的影响，通过测试可以证明。<img src="/images/lingpaitong2.JPG"></li></ul></li></ul><blockquote><p><strong> 方式2和方式3可以协作运行，比如用方式3先进行防攻击限速，然后再用方式2进行精确限速。</strong></p></blockquote><h3 id="多线程处理"><a href="#多线程处理" class="headerlink" title="多线程处理"></a>多线程处理</h3><p><strong> 多线程处理的基本思想，如下图所示：</strong></p><ul><li>一个全局令牌桶<br>  随着时间的推移，每次放入令牌仅仅放入全局令牌桶。为什么不放入线程令牌桶？假设需要限速的报文到了不同的线程，并且每个线程流量不同，那么对于每个线程放入令牌的数量就不得而知了。</li><li>每个线程拥有独立的子令牌桶<br>  子令牌桶只消费令牌，不放入令牌。当子令牌桶的令牌不够时，从全局令牌桶索取令牌。</li></ul><img src="/images/lptfp.PNG"><p><strong> 详细流程 </strong><br>下面将用流程图的形式来描述多线程令牌桶的实现。在最后会介绍这种令牌桶算法可能存在的问题。<br><img src="/images/lingpaitong3.jpg"></p><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>设置限速11Mbps，测试结果为：<br><img src="/images/lingpaitong_rs.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;QoS（Quality of Service，服务质量）指一个网络能够利用各种基础技术，为指定的网络通信提供更好的服务能力, 是网络的一种安全机制， 是用来解决网络延迟和阻塞等问题的一种技术。其中限速就是一种QOS机制，目前限速算法中用得比较多的是令牌桶算法。本文不打算套路
      
    
    </summary>
    
      <category term="原创精选" scheme="http://blog.mycise.com/categories/%E5%8E%9F%E5%88%9B%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="网络转发" scheme="http://blog.mycise.com/tags/%E7%BD%91%E7%BB%9C%E8%BD%AC%E5%8F%91/"/>
    
      <category term="DPDK" scheme="http://blog.mycise.com/tags/DPDK/"/>
    
      <category term="令牌桶算法" scheme="http://blog.mycise.com/tags/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95/"/>
    
      <category term="多核限速" scheme="http://blog.mycise.com/tags/%E5%A4%9A%E6%A0%B8%E9%99%90%E9%80%9F/"/>
    
  </entry>
  
  <entry>
    <title>dpvs源码分析（一）之启动过程</title>
    <link href="http://blog.mycise.com/2018/05/03/dpvs%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://blog.mycise.com/2018/05/03/dpvs源码分析（一）之启动过程/</id>
    <published>2018-05-03T14:28:37.268Z</published>
    <updated>2018-05-03T14:36:49.687Z</updated>
    
    <content type="html"><![CDATA[<p>本文用于分析dpvs的启动流程，会对主要逻辑进行解析，忽略了一些边缘代码，比如配置文件解析，函数指针的注册等等。在阅读主逻辑的时候，如果有疑问的地方，再去看一些配置相关，初始化相关的代码。这样不仅高效而且不会那么枯燥。被忽略的代码将在本文中用…代替。</p><h1 id="从main函数开始"><a href="#从main函数开始" class="headerlink" title="从main函数开始"></a>从main函数开始</h1><p>在src/mian.c文件中，main函数还是比较清晰的。首先是初始 -&gt; 然后启动端口 -&gt; 然后启动工作线程 -&gt; 主线程进入循环。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//各种初始化，暂不关心，用到的时候再看。</span></span><br><span class="line">    err = rte_eal_init(argc, argv);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; <span class="number">0</span>)</span><br><span class="line">        rte_exit(EXIT_FAILURE, <span class="string">"Invalid EAL parameters\n"</span>);</span><br><span class="line">    argc -= err, argv += err;</span><br><span class="line"></span><br><span class="line">    rte_timer_subsystem_init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = cfgfile_init()) != EDPVS_OK)</span><br><span class="line">        rte_exit(EXIT_FAILURE, <span class="string">"Fail init configuration file: %s\n"</span>,</span><br><span class="line">                 dpvs_strerror(err));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = netif_virtual_devices_add()) != EDPVS_OK)</span><br><span class="line">        rte_exit(EXIT_FAILURE, <span class="string">"Fail add virtual devices:%s\n"</span>,</span><br><span class="line">                 dpvs_strerror(err));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = dpvs_timer_init()) != EDPVS_OK)</span><br><span class="line">        rte_exit(EXIT_FAILURE, <span class="string">"Fail init timer on %s\n"</span>, dpvs_strerror(err));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = tc_init()) != EDPVS_OK)</span><br><span class="line">        rte_exit(EXIT_FAILURE, <span class="string">"Fail to init traffic control: %s\n"</span>,</span><br><span class="line">                 dpvs_strerror(err));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = netif_init(<span class="literal">NULL</span>)) != EDPVS_OK)</span><br><span class="line">        rte_exit(EXIT_FAILURE, <span class="string">"Fail to init netif: %s\n"</span>, dpvs_strerror(err));</span><br><span class="line">    <span class="comment">/* Default lcore conf and port conf are used and may be changed here </span></span><br><span class="line"><span class="comment">     * with "netif_port_conf_update" and "netif_lcore_conf_set" */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = ctrl_init()) != EDPVS_OK)</span><br><span class="line">        rte_exit(EXIT_FAILURE, <span class="string">"Fail to init ctrl plane: %s\n"</span>,</span><br><span class="line">                 dpvs_strerror(err));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = tc_ctrl_init()) != EDPVS_OK)</span><br><span class="line">        rte_exit(EXIT_FAILURE, <span class="string">"Fail to init tc control plane: %s\n"</span>,</span><br><span class="line">                 dpvs_strerror(err));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = vlan_init()) != EDPVS_OK)</span><br><span class="line">        rte_exit(EXIT_FAILURE, <span class="string">"Fail to init vlan: %s\n"</span>, dpvs_strerror(err));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = inet_init()) != EDPVS_OK)</span><br><span class="line">        rte_exit(EXIT_FAILURE, <span class="string">"Fail to init inet: %s\n"</span>, dpvs_strerror(err));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = sa_pool_init()) != EDPVS_OK)</span><br><span class="line">        rte_exit(EXIT_FAILURE, <span class="string">"Fail to init sa_pool: %s\n"</span>, dpvs_strerror(err));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = dp_vs_init()) != EDPVS_OK)</span><br><span class="line">        rte_exit(EXIT_FAILURE, <span class="string">"Fail to init ipvs: %s\n"</span>, dpvs_strerror(err));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = netif_ctrl_init()) != EDPVS_OK)</span><br><span class="line">        rte_exit(EXIT_FAILURE, <span class="string">"Fail to init netif_ctrl: %s\n"</span>,</span><br><span class="line">                 dpvs_strerror(err));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* config and start all available dpdk ports */</span></span><br><span class="line">    nports = rte_eth_dev_count();</span><br><span class="line">    <span class="keyword">for</span> (pid = <span class="number">0</span>; pid &lt; nports; pid++) &#123;</span><br><span class="line">        dev = netif_port_get(pid);</span><br><span class="line">        <span class="keyword">if</span> (!dev) &#123;</span><br><span class="line">            RTE_LOG(WARNING, DPVS, <span class="string">"port %d not found\n"</span>, pid);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//启动端口，配置端口。比如端口，队列，cpu的绑定等等。</span></span><br><span class="line">        err = netif_port_start(dev);</span><br><span class="line">        <span class="keyword">if</span> (err != EDPVS_OK)</span><br><span class="line">            RTE_LOG(WARNING, DPVS, <span class="string">"Start %s failed, skipping ...\n"</span>,</span><br><span class="line">                    dev-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* print port-queue-lcore relation */</span></span><br><span class="line">    netif_print_lcore_conf(pql_conf_buf, &amp;pql_conf_buf_len, <span class="literal">true</span>, <span class="number">0</span>);</span><br><span class="line">    RTE_LOG(INFO, DPVS, <span class="string">"\nport-queue-lcore relation array: \n%s\n"</span>,</span><br><span class="line">            pql_conf_buf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* start data plane threads */</span></span><br><span class="line">    netif_lcore_start(); <span class="comment">//这里就是干活的线程，通过跟踪这个函数，最后会调用到netif_loop，即工作线程的loop</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* write pid file */</span></span><br><span class="line">    <span class="keyword">if</span> (!pidfile_write(DPVS_PIDFILE, getpid()))</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line"></span><br><span class="line">    timer_sched_loop_interval = dpvs_timer_sched_interval_get();</span><br><span class="line">    assert(timer_sched_loop_interval &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    dpvs_state_set(DPVS_STATE_NORMAL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* start control plane thread */</span></span><br><span class="line">    <span class="comment">// 主线程循环，用于处理ctrl plane等消息，这里占不讨论，后续文章再讨论。</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* reload configuations if reload flag is set */</span></span><br><span class="line">        try_reload();</span><br><span class="line">        <span class="comment">/* IPC loop */</span></span><br><span class="line">        sockopt_ctl(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">/* msg loop */</span></span><br><span class="line">        msg_master_process();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* timer */</span></span><br><span class="line">        loop_cnt++;</span><br><span class="line">        <span class="keyword">if</span> (loop_cnt % timer_sched_loop_interval == <span class="number">0</span>)</span><br><span class="line">            rte_timer_manage();</span><br><span class="line">        <span class="comment">/* kni */</span></span><br><span class="line">        kni_process_on_master();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* process mac ring on master */</span></span><br><span class="line">        neigh_process_ring(<span class="literal">NULL</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* increase loop counts */</span></span><br><span class="line">        netif_update_master_loop_cnt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="DPVS-dataplane线程，即工作线程"><a href="#DPVS-dataplane线程，即工作线程" class="headerlink" title="DPVS dataplane线程，即工作线程"></a>DPVS dataplane线程，即工作线程</h1><p>DPVS在netif.c文件中static int netif_loop(void * dummy) 函数中收取，处理和发送数据包。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">netif_loop</span><span class="params">(<span class="keyword">void</span> *dummy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    try_isol_rxq_lcore_loop();</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == lcore_conf[lcore2index[cid]].nports) &#123;</span><br><span class="line">        RTE_LOG(INFO, NETIF, <span class="string">"[%s] Lcore %d has nothing to do.\n"</span>, __func__, cid);</span><br><span class="line">        <span class="keyword">return</span> EDPVS_IDLE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 这里收包和处理CPU分离，是指收包的CPU和处理包的CPU不同，应该是为了增加网卡的吞吐能力吧。</span></span><br><span class="line"><span class="comment">    只有在/etc/dpvs.conf配置文件中配置了isol_rx_cpu_ids才会生效，暂时用不到，在后文中再来分析吧*/</span></span><br><span class="line"></span><br><span class="line">    list_for_each_entry(job, &amp;netif_lcore_jobs[NETIF_LCORE_JOB_INIT], <span class="built_in">list</span>) &#123;</span><br><span class="line">        do_lcore_job(job);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* NETIF_LCORE_JOB_INIT type类型暂时没有用到，忽略之*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_RECORD_BIG_LOOP</span></span><br><span class="line">        loop_start = rte_get_timer_cycles();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/* CONFIG_RECORD_BIG_LOOP给统计和debug用，暂不关心 */</span></span><br><span class="line"></span><br><span class="line">        lcore_stats[cid].lcore_loop++;</span><br><span class="line">        list_for_each_entry(job, &amp;netif_lcore_jobs[NETIF_LCORE_JOB_LOOP], <span class="built_in">list</span>) &#123;</span><br><span class="line">            do_lcore_job(job);</span><br><span class="line">        &#125;</span><br><span class="line">        ++netif_loop_tick[cid];</span><br><span class="line">        list_for_each_entry(job, &amp;netif_lcore_jobs[NETIF_LCORE_JOB_SLOW], <span class="built_in">list</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (netif_loop_tick[cid] % job-&gt;skip_loops == <span class="number">0</span>) &#123;</span><br><span class="line">                do_lcore_job(job);</span><br><span class="line">                <span class="comment">//netif_loop_tick[cid] = 0;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 上面代码有点类似于netfilter处理链，数据包会被处理链的job依次处理, 这些job链放在netif_lcore_jobs 这个全局变量中。</span></span><br><span class="line"><span class="comment">        那么，有哪些job呢，在什么地方初始化这个全局变量的呢？他们的处理顺序是怎么样的？在下一节会有说明*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_RECORD_BIG_LOOP</span></span><br><span class="line">        loop_end = rte_get_timer_cycles();</span><br><span class="line">        loop_time = (loop_end - loop_start) * <span class="number">1E6</span> / cycles_per_sec;</span><br><span class="line">        <span class="keyword">if</span> (loop_time &gt; longest_lcore_loop[cid]) &#123;</span><br><span class="line">            RTE_LOG(WARNING, NETIF, <span class="string">"update longest_lcore_loop[%d] = %d (&lt;- %d)\n"</span>,</span><br><span class="line">                    cid, loop_time, longest_lcore_loop[cid]);</span><br><span class="line">            longest_lcore_loop[cid] = loop_time;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (loop_time &gt; BIG_LOOP_THRESH) &#123;</span><br><span class="line">            print_job_time(buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">            RTE_LOG(WARNING, NETIF, <span class="string">"lcore[%d] loop over %d usecs (actual=%d, max=%d):\n%s\n"</span>,</span><br><span class="line">                    cid, BIG_LOOP_THRESH, loop_time, longest_lcore_loop[cid], buf);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/* CONFIG_RECORD_BIG_LOOP给统计和debug用，暂不关心 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> EDPVS_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//那么do_lcore_job 做了什么呢？ 其实do_lcore_job就是调用了job结构体中注册的函数指针指向的函数。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">do_lcore_job</span><span class="params">(struct netif_lcore_loop_job *job)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_RECORD_BIG_LOOP</span></span><br><span class="line">    <span class="keyword">uint64_t</span> job_start, job_end;</span><br><span class="line">    job_start = rte_get_timer_cycles();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    job-&gt;func(job-&gt;data);</span><br><span class="line">    <span class="comment">// 这里就是真正干活的地方了。</span></span><br><span class="line">    <span class="comment">// func 函数指针在main函数中进行了初始化，初始化过程及代码位置在下一节会讲到。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_RECORD_BIG_LOOP</span></span><br><span class="line">    job_end = rte_get_timer_cycles();</span><br><span class="line">    job-&gt;job_time[rte_lcore_id()] = (job_end - job_start) * <span class="number">1E6</span> / cycles_per_sec;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="DPVS-dataplane线程job初始化（-也就是-netif-lcore-jobs-全局变量的初始化）"><a href="#DPVS-dataplane线程job初始化（-也就是-netif-lcore-jobs-全局变量的初始化）" class="headerlink" title="DPVS dataplane线程job初始化（ 也就是 netif_lcore_jobs 全局变量的初始化）"></a>DPVS dataplane线程job初始化（ 也就是 netif_lcore_jobs 全局变量的初始化）</h1><p>目前job的类型为，又有NETIF_LCORE_JOB_LOOP和NETIF_LCORE_JOB_SLOW有用到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum netif_lcore_job_type &#123;</span><br><span class="line">    NETIF_LCORE_JOB_INIT      = 0,</span><br><span class="line">    NETIF_LCORE_JOB_LOOP      = 1,</span><br><span class="line">    NETIF_LCORE_JOB_SLOW      = 2,</span><br><span class="line">    NETIF_LCORE_JOB_TYPE_MAX  = 3,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="job注册函数"><a href="#job注册函数" class="headerlink" title="job注册函数"></a>job注册函数</h2><p>netif_lcore_loop_job_register 函数将job这测到netif_lcore_jobs这个全局变量中。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">netif_lcore_loop_job_register</span><span class="params">(struct netif_lcore_loop_job *lcore_job)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">netif_lcore_loop_job</span> *<span class="title">cur</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (unlikely(<span class="literal">NULL</span> == lcore_job))</span><br><span class="line">        <span class="keyword">return</span> EDPVS_INVAL;</span><br><span class="line"></span><br><span class="line">    list_for_each_entry(cur, &amp;netif_lcore_jobs[lcore_job-&gt;type], <span class="built_in">list</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == lcore_job) &#123;</span><br><span class="line">            <span class="keyword">return</span> EDPVS_EXIST;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (unlikely(NETIF_LCORE_JOB_SLOW == lcore_job-&gt;type &amp;&amp; lcore_job-&gt;skip_loops &lt;= <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> EDPVS_INVAL;</span><br><span class="line"></span><br><span class="line">    list_add_tail(&amp;lcore_job-&gt;<span class="built_in">list</span>, &amp;netif_lcore_jobs[lcore_job-&gt;type]);</span><br><span class="line">    <span class="comment">//netif_lcore_jobs 记录job的全局变量，这个在netif_loop用到了</span></span><br><span class="line">    <span class="keyword">return</span> EDPVS_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么在哪些位置调用了netif_lcore_loop_job_register 注册job，通过阅读源代码，可以发现注册NETIF_LCORE_JOB_LOOP， NETIF_LCORE_JOB_SLOW 这两种类型的job分布在如下所示位置。</p><h2 id="NETIF-LCORE-JOB-LOOP-job注册"><a href="#NETIF-LCORE-JOB-LOOP-job注册" class="headerlink" title="NETIF_LCORE_JOB_LOOP job注册"></a>NETIF_LCORE_JOB_LOOP job注册</h2><p><strong> 第一处： main-&gt;netif_init-&gt;netif_lcore_init函数中：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* register lcore jobs*/</span></span><br><span class="line"><span class="built_in">snprintf</span>(netif_jobs[<span class="number">0</span>].name, <span class="keyword">sizeof</span>(netif_jobs[<span class="number">0</span>].name) - <span class="number">1</span>, <span class="string">"%s"</span>, <span class="string">"recv_fwd"</span>);</span><br><span class="line">netif_jobs[<span class="number">0</span>].func = lcore_job_recv_fwd;</span><br><span class="line">netif_jobs[<span class="number">0</span>].data = <span class="literal">NULL</span>;</span><br><span class="line">netif_jobs[<span class="number">0</span>].type = NETIF_LCORE_JOB_LOOP;</span><br><span class="line"><span class="built_in">snprintf</span>(netif_jobs[<span class="number">1</span>].name, <span class="keyword">sizeof</span>(netif_jobs[<span class="number">1</span>].name) - <span class="number">1</span>, <span class="string">"%s"</span>, <span class="string">"xmit"</span>);</span><br><span class="line">netif_jobs[<span class="number">1</span>].func = lcore_job_xmit;</span><br><span class="line">netif_jobs[<span class="number">1</span>].data = <span class="literal">NULL</span>;</span><br><span class="line">netif_jobs[<span class="number">1</span>].type = NETIF_LCORE_JOB_LOOP;</span><br><span class="line"><span class="built_in">snprintf</span>(netif_jobs[<span class="number">2</span>].name, <span class="keyword">sizeof</span>(netif_jobs[<span class="number">2</span>].name) - <span class="number">1</span>, <span class="string">"%s"</span>, <span class="string">"timer_manage"</span>);</span><br><span class="line">netif_jobs[<span class="number">2</span>].func = lcore_job_timer_manage;</span><br><span class="line">netif_jobs[<span class="number">2</span>].data = <span class="literal">NULL</span>;</span><br><span class="line">netif_jobs[<span class="number">2</span>].type = NETIF_LCORE_JOB_LOOP;</span><br></pre></td></tr></table></figure></p><p><strong> 第二处： main-&gt;ctrl_init-&gt;msg_init</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctrl_lcore_job.func = slave_lcore_loop_func;</span><br><span class="line">ctrl_lcore_job.data = <span class="literal">NULL</span>;</span><br><span class="line">ctrl_lcore_job.type = NETIF_LCORE_JOB_LOOP;</span><br><span class="line"><span class="keyword">if</span> ((ret = netif_lcore_loop_job_register(&amp;ctrl_lcore_job)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    RTE_LOG(ERR, MSGMGR, <span class="string">"%s: fail to register ctrl func on slave lcores\n"</span>, __func__);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="NETIF-LCORE-JOB-SLOW-job注册"><a href="#NETIF-LCORE-JOB-SLOW-job注册" class="headerlink" title="NETIF_LCORE_JOB_SLOW job注册"></a>NETIF_LCORE_JOB_SLOW job注册</h2><p><strong> 第一处： main-&gt;inet_init -&gt; ipv4_init-&gt; ipv4_frag_init </strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">frag_job.func = ipv4_frag_job;</span><br><span class="line">frag_job.data = <span class="literal">NULL</span>;</span><br><span class="line">frag_job.type = NETIF_LCORE_JOB_SLOW;</span><br><span class="line">frag_job.skip_loops = IP4_FRAG_FREE_DEATH_ROW_INTERVAL;</span><br><span class="line">err = netif_lcore_loop_job_register(&amp;frag_job);</span><br></pre></td></tr></table></figure></p><p><strong> 第二处： mian-&gt;inet_init -&gt; neigh_init -&gt; arp_init </strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">neigh_sync_job.func = neigh_process_ring;</span><br><span class="line">neigh_sync_job.data = <span class="literal">NULL</span>;</span><br><span class="line">neigh_sync_job.type = NETIF_LCORE_JOB_SLOW;</span><br><span class="line">neigh_sync_job.skip_loops = NEIGH_PROCESS_MAC_RING_INTERVAL;</span><br><span class="line">err = netif_lcore_loop_job_register(&amp;neigh_sync_job);</span><br></pre></td></tr></table></figure></p><p><strong> 通过上述分析，那么我们可以知道job的处理流程为 </strong><br>以下流程虽然都要执行，但是函数前后并不是强制依赖，比如lcore_job_timer_manage 不依赖于lcore_job_xmit的执行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lcore_job_recv_fwd -&gt; lcore_job_xmit -&gt; lcore_job_timer_manage -&gt; slave_lcore_loop_func -&gt;</span><br><span class="line">ipv4_frag_job -&gt; neigh_process_ring</span><br></pre></td></tr></table></figure></p><p>这些函数的具体功能，将在下一章节进行分析。</p><p>启动过程就到此结束了，若有疑问，欢迎发邮件和我联系。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文用于分析dpvs的启动流程，会对主要逻辑进行解析，忽略了一些边缘代码，比如配置文件解析，函数指针的注册等等。在阅读主逻辑的时候，如果有疑问的地方，再去看一些配置相关，初始化相关的代码。这样不仅高效而且不会那么枯燥。被忽略的代码将在本文中用…代替。&lt;/p&gt;
&lt;h1 id=
      
    
    </summary>
    
      <category term="网络转发" scheme="http://blog.mycise.com/categories/%E7%BD%91%E7%BB%9C%E8%BD%AC%E5%8F%91/"/>
    
    
      <category term="网络转发" scheme="http://blog.mycise.com/tags/%E7%BD%91%E7%BB%9C%E8%BD%AC%E5%8F%91/"/>
    
      <category term="DPVS" scheme="http://blog.mycise.com/tags/DPVS/"/>
    
      <category term="DPDK" scheme="http://blog.mycise.com/tags/DPDK/"/>
    
  </entry>
  
  <entry>
    <title>c语言构造函数</title>
    <link href="http://blog.mycise.com/2018/05/03/c%E8%AF%AD%E8%A8%80%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.mycise.com/2018/05/03/c语言构造函数/</id>
    <published>2018-05-03T14:28:37.262Z</published>
    <updated>2018-05-05T09:11:02.563Z</updated>
    
    <content type="html"><![CDATA[<p>说起这个属性，要从fio的vpp说起，引擎的注册函数fio_libaio_register与反注册函数fio_libaio_unregister都没有其他函数调用，而fio又没有以动态库的形式将这两个函数供别的地方使用,但是这两个函数有宏定义fio_init和fio_exit来修饰。这个两个个宏定义为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fio_init __attribute__((constructor))  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fio_exit __attribute__((destructor))</span></span><br></pre></td></tr></table></figure></p><p>以如下构造函数为例,这是vpp中的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VLIB_DECLARE_INIT_FUNCTION(x, tag)                      \</span></span><br><span class="line"><span class="keyword">vlib_init_function_t</span> * _VLIB_INIT_FUNCTION_SYMBOL (x, tag) = x; \</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __vlib_add_#<span class="meta">#tag##_function_##x (void)              \</span></span><br><span class="line">    __attribute__((__constructor__)) ;                          \</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __vlib_add_#<span class="meta">#tag##_function_##x (void)              \</span></span><br><span class="line">&#123;                                                               \</span><br><span class="line"> <span class="keyword">vlib_main_t</span> * vm = vlib_get_main();                            \</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">_vlib_init_function_list_elt_t</span> _vlib_init_function;     \</span><br><span class="line"> _vlib_init_function.next_init_function                         \</span><br><span class="line">    = vm-&gt;tag##_function_registrations;                         \</span><br><span class="line">  vm-&gt;tag##_function_registrations = &amp;_vlib_init_function;      \</span><br><span class="line"> _vlib_init_function.f = &amp;x;                                    \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个两个属性是gcc提供的属性，在dpdk中也有体现。若函数被设定为constructor属性，则该函数会在main（）函数执行之前被自动的执行。若函数被设定为destructor属性，则该函数会在main（）函数执行之后或者exit（）被调用后被自动的执行。通过如下测试代码，能更加清晰地认识到这两个属性的作用：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  </span></span></span><br><span class="line"><span class="keyword">void</span> __attribute__((constructor)) con_func()  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"befor main: constructor is called..\n"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">void</span> __attribute__((destructor)) des_func()  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"after main: destructor is called..\n"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"main func..\n"</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">befor main: constructor is called..  </span><br><span class="line">main func..  </span><br><span class="line">after main: destructor is called..</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说起这个属性，要从fio的vpp说起，引擎的注册函数fio_libaio_register与反注册函数fio_libaio_unregister都没有其他函数调用，而fio又没有以动态库的形式将这两个函数供别的地方使用,但是这两个函数有宏定义fio_init和fio_exi
      
    
    </summary>
    
      <category term="原创精选" scheme="http://blog.mycise.com/categories/%E5%8E%9F%E5%88%9B%E7%B2%BE%E9%80%89/"/>
    
    
      <category term="c语言构造" scheme="http://blog.mycise.com/tags/c%E8%AF%AD%E8%A8%80%E6%9E%84%E9%80%A0/"/>
    
      <category term="c语言析构" scheme="http://blog.mycise.com/tags/c%E8%AF%AD%E8%A8%80%E6%9E%90%E6%9E%84/"/>
    
  </entry>
  
</feed>
